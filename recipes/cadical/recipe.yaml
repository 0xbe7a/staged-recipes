context:
  version: "2.1.3"

package:
  name: cadical
  version: ${{ version }}

source:
  url: https://github.com/arminbiere/cadical/archive/refs/tags/rel-${{ version }}.tar.gz
  sha256: abfe890aa4ccda7b8449c7ad41acb113cfb8e7e8fbf5e49369075f9b00d70465

build:
  script: |

    cp $RECIPE_DIR/CMakeLists.txt CMakeLists.txt
    # ./scripts/make-build-header.sh
    cmake -GNinja $CMAKE_ARGS -B build -S .
    cmake --build build --config Release
    cmake --install build --prefix $PREFIX
    # ./configure
    # cd build
    # make -j${CPU_COUNT}
    # mkdir -p $PREFIX/bin
    # mkdir -p $PREFIX/lib
    # mkdir -p $PREFIX/include

    # cp cadical $PREFIX/bin/
    # cp libcadical.a $PREFIX/lib/
    # cp ../src/cadical.hpp $PREFIX/include/
    # cp ../src/ccadical.h $PREFIX/include/
    # cp ../src/ipasir.h $PREFIX/include/

requirements:
  build:
    - ${{ compiler('cxx') }}
    - ninja
    - cmake

tests:
  - package_contents:
      include:
        - cadical.hpp
      lib:
        - cadical
      bin:
        - cadical
        - mobical

  - script: 
      - cadical --version
  - script:
      - cadical simple.cnf > output.txt || EXIT_CODE=$?
      - test $EXIT_CODE -eq 20
      - cat output.txt
      - grep "s UNSATISFIABLE" output.txt
    files:
      recipe:
        - simple.cnf
  - script:
      - $CXX test.cpp $CXXFLAGS $LDFLAGS -I$PREFIX/include -lcadical -o test -std=c++11 
      - ./test
    files:
      recipe:
        - test.cpp
    requirements:
      run:
        - ${{ compiler('cxx') }}

about:
  homepage: https://fmv.jku.at/cadical/
  license: MIT
  summary: Clean and efficient state-of-the-art SAT solver
  description: |
    CaDiCaL is a simplified SAT solver written in C++. It is designed to be 
    clean, efficient, and easy to use. The solver is highly competitive in 
    international SAT competitions and provides both a library and a standalone 
    binary for solving SAT problems.
