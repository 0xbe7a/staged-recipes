# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 16 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "am3" %}
{% set version = "1.1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://gitlab.desy.de/am3/{{ name }}/-/archive/v{{ version }}/{{ name }}-v{{ version }}.tar.gz
  # can get this via (e.g. for version 1.1.0)
  # curl -L -o am3-v1.1.0.tar.gz https://gitlab.desy.de/am3/am3/-/archive/v1.1.0/am3-v1.1.0.tar.gz
  # shasum -a 256 am3-v1.1.0.tar.gz
  sha256: 92afb78f9c9aeeadfa373ce9f507e3a16939d3c70fa38ddcd901467df589cbe5

build:
  # this number is relevant for conda update
  number: 0

requirements:
  build:
    # If your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # Compilers are named 'c', 'cxx', 'fortran', among others
    - {{ compiler('cxx') }}
    # this is necessary for all compiled recipes
    - {{ stdlib('c') }}
    - cmake
    - make
    - pybind11
    - python
    - eigen
    - gsl
    - libomp        # [linux]
    - llvm-openmp   # [osx]
  host:
    - python
    - pybind11
    - numpy >=1.26,<3.0
  run:
    - python
    - numpy >=1.26,<3.0

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - am3
  #   - simplejson
  #   - simplejson.tests
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  # requires:
  #   - pip
  # commands:
  #   - pip check

about:
  home: https://gitlab.desy.de/am3/am3
  summary: 'Astrophysical Multi-Messenger Modeling (AM³) Software'
  description: |
    AM³ is a software package for simulating lepto-hadronic interactions in astrophysical environments. 
    It solves the time-dependent partial differential equations for the energy spectra of electrons, 
    positrons, protons, neutrons, photons, neutrinos as well as charged secondaries (pions and muons), 
    immersed in an isotropic magnetic field. Crucially, it accounts for the fact that photons and 
    charged secondaries emitted in electromagnetic and hadronic interactions feed back into the 
    interaction rates in a time-dependent manner, therefore grasping non-linear effects including 
    electromagnetic cascades.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: BSD 3-Clause
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: BSD
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE
  # The doc_url and dev_url are optional.
  doc_url: https://am3.readthedocs.io/en/latest/
  dev_url: https://gitlab.desy.de/am3/am3

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - maklinger
