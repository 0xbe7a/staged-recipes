{% set name = "OpenOrbitalOptimizer" %}
{% set version = "0.1" %}
{% set sha256 = "da6836edfc1e78c5e2286dbbc9edd51e44b370b95840d2f4ff40cfd1ebce7986" %}

package:
  name: {{ name|lower }}-split
  version: {{ version }}

source:
  #url: https://github.com/SusiLehtola/{{ name }}/archive/v{{ version }}.tar.gz
  url: https://github.com/loriab/OpenOrbitalOptimizer/archive/cf.tar.gz
  sha256: {{ sha256 }}

build:
  number: 0
  binary_relocation: true

outputs:
  - name: openorbitaloptimizer
    script: build-cxx.sh                                                       # [unix]
#    script: bld-cxx.bat                                                        # [win]
    build:
      skip: true                                                               # [win]
      run_exports:
        - {{ pin_subpackage('openorbitaloptimizer', max_pin='x.x') }}
#      ignore_run_exports:
#        # not using hdf5's fortran interface
#        - libgfortran-ng
#        - libgfortran5
    requirements:
      build:
        - {{ stdlib("c") }}
        - {{ compiler('cxx') }}
        - cmake
        - ninja
#        - llvm-openmp                                                          # [osx]
#        - libgomp                                                              # [linux]
      host:
        - armadillo
#        - hdf5
#        - libblas
#        - liblapack
#        - intel-openmp                                                         # [win]
#      run:
#        - intel-openmp                                                         # [win]
    test:
      requires:
        - libxc
        - nlohmann_json
#        - m2w64-binutils                                                       # [win]   # provides objdump.exe
#* [IntegratorXX](https://github.com/wavefunction91/IntegratorXX)
      commands:
#        # Verify library
#        - test -f $PREFIX/lib/libambit$SHLIB_EXT                               # [unix]
#        - test ! -f $PREFIX/lib/libambit.a                                     # [unix]
#        - if not exist %PREFIX%\\Library\\lib\\ambit.lib exit 1                # [win]   # ms static lib
#        - if exist %PREFIX%\\Library\\bin\\ambit.dll exit 1                    # [win]   # ms dyn lib absent
        # Verify accessories
        - test -f $PREFIX/include/openorbitaloptimizer/scfsolver.hpp           # [unix]
        - test -f $PREFIX/include/openorbitaloptimizer/cg_optimizer.hpp        # [unix]
        - test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerConfig.cmake  # [unix]
        - test -f $PREFIX/share/cmake/OpenOrbitalOptimizer/OpenOrbitalOptimizerTargets.cmake  # [unix]
        - if not exist %PREFIX%\\Library\\include\\openorbitaloptimizer\\scfsolver.hpp exit 1  # [win]
        - if not exist %PREFIX%\\Library\\include\\openorbitaloptimizer\\cg_optimizer.hpp exit 1  # [win]
        - if not exist %PREFIX%\\Library\\share\\cmake\\OpenOrbitalOptimizer\\OpenOrbitalOptimizerConfig.cmake exit 1   # [win]
        - if not exist %PREFIX%\\Library\\share\\cmake\\OpenOrbitalOptimizer\\OpenOrbitalOptimizerTargets.cmake exit 1  # [win]
#        # Inspect linkage
#        - ldd -v $PREFIX/lib/libambit$SHLIB_EXT                                # [linux]
#        - otool -L $PREFIX/lib/libambit$SHLIB_EXT                              # [osx]
#        - objdump.exe -p %PREFIX%\\Library\\lib\\ambit.lib | findstr /i "dll"  # [win]

#  - name: pyambit
#    script: build-py.sh                                                        # [unix]
#    script: bld-py.bat                                                         # [win]
#    build:
#      skip: true                                                               # [win]
#    requirements:
#      build:
#        - {{ compiler('c') }}
#        - {{ compiler('cxx') }}
#        - cmake
#        - ninja
#        - python                                                               # [build_platform != target_platform]
#        - cross-python_{{ target_platform }}                                   # [build_platform != target_platform]
#        - numpy                                                                # [build_platform != target_platform]
#        - pybind11                                                             # [build_platform != target_platform]
#      host:
#        - {{ pin_subpackage('ambit', exact=True) }}
#        - python
#        - pybind11
#        - pybind11-abi
#        - numpy
#        - libblas                                                              # [win]
#        - liblapack                                                            # [win]
#        - intel-openmp                                                         # [win]
#      run:
#        - {{ pin_subpackage('ambit', exact=True) }}
#        - python
#        - intel-openmp                                                         # [win]
#    test:
#      requires:
#        - pip                                                                            # provides `pip check`
#        - pytest
#        - numpy
#        - m2w64-binutils                                                       # [win]   # provides objdump.exe
#      files:
#        - test_ambit.py
#      imports:
#        - ambit
#      commands:
#        - ls -l $SP_DIR/ambit                                                  # [unix]
#        - dir %SP_DIR%\\ambit                                                  # [win]
#        # Verify module
#        - test -f $SP_DIR/ambit/pyambit*.so                                    # [unix]
#        - if not exist %SP_DIR%\\ambit\\pyambit*.pyd exit 1                    # [win]
#        # Verify accessories
#        - test -f $PREFIX/share/cmake/ambit/ambitConfig.cmake                  # [unix]
#        - test -f $PREFIX/share/cmake/ambit/ambitTargets-Python.cmake          # [unix]
#        - if not exist %PREFIX%\\Library\\share\\cmake\\ambit\\ambitConfig.cmake exit 1  # [win]
#        - if not exist %PREFIX%\\Library\\share\\cmake\\ambit\\ambitTargets-Python.cmake exit 1  # [win]
#        # Inspect linkage
#        - ldd -v $SP_DIR/ambit/pyambit*.so                                     # [linux]
#        - otool -L $SP_DIR/ambit/pyambit*.so                                   # [osx]
#        - objdump.exe -p %SP_DIR%\\ambit\\pyambit.*.pyd | findstr /i "dll"     # [win]
#        # Actually test
#        - pip check
#        - python test_ambit.py
#        - pytest -v -rws --color yes $SP_DIR/ambit                             # [unix]
#        - pytest -v -rws --color yes %SP_DIR%\\ambit                           # [win]

#      host:
#        - libblas
#        - liblapack
#    files:
#      - include/efp.h                   # [unix]
#      - include/libefp/*                # [unix]
#      - lib/libefp{{ SHLIB_EXT }}*      # [linux]
#      - lib/libefp.*dylib               # [osx]
#      - share/cmake/libefp/*            # [unix]
#      - share/libefp/*                  # [unix]
#      - share/libefp/fraglib/*          # [unix]
#      - Library/include/efp.h           # [win]
#      - Library/include/libefp/*        # [win]
#      - Library/bin/efp*                # [win]
#      - Library/lib/efp*                # [win]
#      - Library/share/cmake/libefp      # [win]
#      - Library/share/libefp/*          # [win]
#      - Library/share/libefp/fraglib/*  # [win]
#    test:
#      commands:
#        - ls -l $PREFIX/lib                                       # [unix]
#        - ls -l $PREFIX/share/cmake/libefp                        # [unix]
#        - dir %PREFIX%\\Library                                   # [win]
#        - dir %PREFIX%\\Library\\include                          # [win]
#        # Verify library
#        - test -f $PREFIX/lib/libefp$SHLIB_EXT                    # [unix]
#        - test ! -f $PREFIX/lib/libefp.a                          # [unix]
#        - if not exist %PREFIX%\\Library\\lib\\efp.lib exit 1     # [win]
#        - if not exist %PREFIX%\\Library\\bin\\efp.dll exit 1     # [win]
#        # Verify accessories
#        - test -f $PREFIX/include/libefp/efp.h                    # [unix]
#        - test -f $PREFIX/share/cmake/libefp/libefpConfig.cmake   # [unix]
#        - test -f $PREFIX/share/libefp/fraglib/h2.efp             # [unix]
#        - if not exist %PREFIX%\\Library\\include\\libefp\\efp.h exit 1  # [win]
#        - if not exist %PREFIX%\\Library\\share\\cmake\\libefp\\libefpConfig.cmake exit 1  # [win]
#        - if not exist %PREFIX%\\Library\\share\\libefp\\fraglib\\h2.efp exit 1  # [win]
#        # Inspect linkage
#        - ldd -v $PREFIX/lib/libefp$SHLIB_EXT                     # [linux and build_platform == target_platform]
#        - otool -L $PREFIX/lib/libefp$SHLIB_EXT                   # [osx]
#
#  - name: pylibefp
#    version: {{ version }}
#    requirements:
#      build:
#        - {{ compiler('c') }}
#        - {{ compiler('cxx') }}
#        - cmake
#        - ninja
#      host:
#        - {{ pin_subpackage('libefp', exact=True) }}
#        - python
#        - pybind11
#        - pybind11-abi
#        - qcelemental
#      run:
#        - {{ pin_subpackage('libefp', exact=True) }}
#        - python
#        - {{ pin_compatible('qcelemental', max_pin='x') }}
#    files:
#      - lib/python{{ PY_VER }}/site-packages/pylibefp  # [unix]
#      - Lib/site-packages/pylibefp                     # [win]
#        # if later install cmake config files for Py module, these are the correct filters
#        # - share/cmake/pylibefp/*                         # [unix]
#        # - Library/share/cmake/pylibefp/*                 # [win]
#    test:
#      requires:
#        - numpy
#        - pytest
#      files:
#        - test_pylibefp.py
#      imports:
#        - pylibefp
#      commands:
#        - ls -l $SP_DIR/pylibefp                                  # [unix]
#        - dir %SP_DIR%\\pylibefp                                  # [win]
#        # Verify module
#        - test -f $SP_DIR/pylibefp/core*.so                       # [unix]
#        - if not exist %SP_DIR%\\pylibefp\\core*.pyd exit 1       # [win]
#        # Inspect linkage
#        - ldd -v $SP_DIR/pylibefp/core*.so                        # [linux]
#        - otool -L $SP_DIR/pylibefp/core*.so                      # [osx]
#        # Actually test
#        - python test_pylibefp.py
#        - python -c "import pylibefp; assert pylibefp.test(extras=['--color', 'yes']) == 0"
#          # equivalent to above: pytest -v -rws --color yes $SP_DIR/pylibefp  # [unix]
#          # equivalent to above: pytest -v -rws --color yes %SP_DIR%\\pylibefp  # [win]
#    about:
#      home: https://github.com/loriab/pylibefp
#      dev_url: https://github.com/loriab/pylibefp/blob/master/README.md
#      doc_source_url: https://github.com/loriab/pylibefp/blob/master/doc/source/introduction.rst
#      license: BSD-3-Clause
#      license_url: https://opensource.org/licenses/BSD-3-Clause
#      license_file: LICENSE
#      license_family: BSD
#      summary: "L. A. Burns's Python bindings to libefp"

about:
  home: https://github.com/SusiLehtola/OpenOrbitalOptimizer
  dev_url: https://github.com/SusiLehtola/OpenOrbitalOptimizer
#  doc_url: https://libefp2.github.io/doxygen_html/index.html
  license: MPL-2.0
  license_url: https://opensource.org/licenses/MPL-2.0
  license_file: LICENSE
  license_family: MOZILLA
  summary: "S. Lehtola's general library for orbital optimization problems in quantum chemistry"
  description: |
    The OpenOrbitalOptimizer is general and reusable library aimed for orbital optimization problems
    that arise with various methods in quantum chemistry, ranging from self-consistent field (SCF)
    methods like Hartree-Fock (HF) and density functional theory (DFT) to more elaborate methods like
    multiconfigurational self-consistent field theory, orbital-optimized coupled-cluster theory,
    generalized valence bond theories, etc. At the moment, the library only does Roothaan-type SCF
    for HF and DFT calculations, but general algorithms for direct minimization on the Grassmann and
    Stiefel manifolds are forthcoming.

extra:
  feedstock-name: openorbitaloptimizer
  recipe-maintainers:
    - loriab
    - susilehtola
